package learn.basic.multi_study.multigain;

/**
 * 使用多态的好处：
 *
 *   在接触多态的时候会产生一个问题  这玩意有什么用 你直接来一个子类对象 不什么都有了吗  为什么还要有一个父类跟着掺和  或者或有一个接口跟着掺和
 *
 *   有什么样的好处  为什么我们推荐用多态的写法呢
 *
 *
 *       举例  比如说这是一个父类 叫做员工  那员工里面就得工作呀  工作就是work()方法  但是具体怎么工作不知道
 *             因为不一样的员工 有可能是讲课的  还可能是辅导的  班主任 讲师啊   助教啊  各自的职责不一样 工作方式不一样
 *             那对于员工来说当然是抽象方法
 *
 *             假如现在有两个子类继承extends或者implements  员工   它们分别是讲师类 work(){讲课}   助教类work(){辅导}
 *
 *             下面通过代码说明一下 使用多态的好处
 *
 *                首先如果不用多态 就是说 我想用谁 我就new谁  压根呢没有多态 我呢只用子类  那么写法是：
 *                  Teacher one = new Teacher();
 *                  one.work();//讲课
 *
 *                  后面在来一个助教怎么办呢
 *
 *                  Assistant two = new Assistant();
 *                  two.work();//辅导
 *
 *                  那现在你看 一个左边是Teacher  另一个呢左边是Assistant   在这里没有多态吧  Zi zi = new Zi();
 *                  而我现在唯一要做的事情，就是调用work方法  对于老板来说它可不管你是谁 老板不关心你具体是干什么的
 *                  反正你要想让我掏钱给你发工资 你就得干活  我是老板我要做得就是督促你赶快去干活  调用work方法 其他的功能不关心
 *                  也就是说你是Teacher调的work呢  还是assistant调的work呢  我不关心  这是你关心的事  我作为老板我可不管这些
 *
 *                  那我们现在来看 这个写法能不能更好
 *                  如果使用多态的写法，对比一下：
 *                  Employee one = new Teacher();
 *                  那你如何进行讲课呢
 *                  one.work();//讲课  你看左父右子 但是我真正运行这个work()的时候  它所出来的是讲课  运行看右边  编译看左 运行看右 这是成员方法的规则
 *                  那接下来又来一个助教
 *                  Employee one = new Assistant();
 *                  one.work();//辅导  和刚才有什么区别
 *
 *                  你看 刚才(上面)是Teacher和Assistant
 *                       现在呢是Employee和Employee
 *                       那你有没有发现 我现在调用的work()方法 其实是在你Employee当中给你定义的  员工对吗
 *                       所以我去调用的时候 我关不关心你这右边到底是讲师还是助教呢  不关心 我只管调用work();
 *                       那只要是个Employee 只要是个员工 就肯定有work呀
 *                       那你说我用了多态以后等号左边是不是就统一了  对吗 这种统一性能带来什么样的好处呢
 *
 *
 *
 *      好处：无论右边new的时候换成哪个子类对象，等号左边调用方法都不会变化。
 *
 *                            比方说 我再来一个班主任  我右边就变了吧  右边我就new 上一个班主任
 *                                     又来一个保洁
 *                                     又来一个保安
 *                                     又来一个行政
 *                                     再来一个财会
 *                                     再来一个人事
 *
 *                                 这么多人都是员工   那你这右边new出来的可是千奇百怪  各式各样的  但是左边都是Employee
 *                                  你去调用work()方法的时候  你这个one 它的类型就是Employee  这就有好处  你右边怎么去动它 怎么去变它
 *                                  不会影响你的左边  不用改代码了  这样的话最起码你左边这部分是固定不变的
 *                                  这样就会让我们的代码更加的灵活  这也就是多态给我们带来的好处所在
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
public class Gain {

    public static void main(String[] args) {

    }
}
