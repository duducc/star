package learn.basic.multi_study.switch_type;


/**
 * 1.对象的向上转型，其实就是多态写法：
 *  格式： 父类名称 对象名 = new  子类名称();             Animal  animal = new  Cat();
 *  含义： 右侧创建一个子类对象，把它当作父类来看待使用。  创建了一只猫，当作动物看待，没问题
 *
 *  注意事项：向上转型一定是安全的。
 *                   因为它是    从小范围转向了大范围    从小范围的猫，向上转型成为更大范围的动物。 肯定是动物范围要比猫的范围广，
 *                   不就是从小到大吗  不管是基本类型也好还是对象类型 你这里从小到大一般都是没有问题的
 *
 *  类似于：
 *   double num = 100；//正确， int -->double,  自动类型转换。
 *
 *
 *
 *   弊端；
 *      对象一旦向上转型为父类，那么就无法调用子类原本特有的方法（内容）  这样的内容就没法用  这就是它的弊端
 *
 *
 *
 *      问题：有时候我们往上转型完之后后悔了  我就想再给你往下转一把  那怎么办 我想给你还原回去
 *  解决方案：用对象的向下转型【还原(什么叫做还原，本来就是猫才能还原成为猫)】
 *
 *  2.对象的向下转型，其实就是一个【还原】的动作。
 *  格式：子类名称  对象名 = (子类名称)父类对象；
 *  含义：将父类对象，【还原】成为本来的子类对象。
 *
 *      举例：
 *         我原本是一只猫  我现在想给你往下还原    结果呢本来是只猫 当作动物  还原的时候走岔了（你本来是猫  你本来不是狗 我就给你往下写一个狗  强制当作狗 你能当作吗  不能
 *                                                为什么 本来是猫 你当作狗 这是错误的！ 为什么  得是还原动作啊  前后不一样）
 *      Animal animal = new Cat();//本来是猫，向上转型成为动物
 *      Cat cat = (Cat)Animal//本来是猫，已经被当作动物了，还原回来成为本来的猫

 *      注意事项：

 *        a.必须保证对象本来创建的时候，就是猫，才能向下转型成为猫。
 *        b.如果对象创建的时候本来不是猫，现在非要向下转型成为猫，就会报错。
 *
 *
 *
 */
public class SwitchTypeMain {
    public static void main(String[] args) {
       //对象的向上转型，就是：父类引用指向子类对象。
        Animal animal = new Cat();//本来创建的时候是一只猫

        //猫吃鱼
        animal.eat();//编译看左  嗯 左边确实有  运行看右  哎  右边 覆盖重写了  是这样的  原本是一只猫  我们把它往上  向上转型成为动物没有问题

        // animal.catchMouse();//错误写法！  你现在是把它当作动物来对待  所有的动物不一定能抓老鼠吧？

        //现在我去调用这个catchMouse()调用不了 我就向下转型
        //向下转型，进行“还原”（什么是还原呢  奥 本来是猫嗷）动作
        Cat cat = (Cat)animal;
        cat.catchMouse();//猫抓老鼠  还原成功


        //下面是错误的向下转型
        //本来new的时候是一只猫，现在非要当成狗（你上去的时候是从猫这里上去的 回来的时候 你得原路返回成为猫  不能说走岔了 猫怎么可能变成狗呢）
        //错误写法！ 编译不会报错，但是运行会出现异常：
        //java.lang.ClassCastException 类转换异常
        //向下转型 前提是  你本来就是  本来不是  你楞转会报异常

        //类似于：基本类型里面的强制类型转换
                  //int  num = (int)10.0; 可以
                  //int  num = (int)10.5; 不可以 精度损失
           //对于基本类型来说 它是有精度损失的
           //对于面向对象  这么多类 这么多对象来看  它就会发生ClassCastException
        Dog dog = (Dog)animal;



    }
}
