package learn.basic.var_study;


import java.sql.ParameterMetaData;

/**
 * 局部变量和成员变量
 *
 * 1.定义的位置不一样 【重点】
 *    局部变量：在方法的内部
 *    成员变量：在方法的外部，直接写在类当中
 * 2.作用范围不一样【重点】
 *     局部变量： 只有方法当中才可以使用，出了方法就不能再用了  方法是不是有一个大括号啊  你要是在方法A当中定义了 就只有方法A自己可以用 被人时不能用它的
 *     成员变量： 整个类全都可以通用
 * 3.默认值不一样  【重点】
 *   局部变量：没有默认值，如果要想使用 ，必须手动进行赋值
 *   成员变量：如果没有赋值，会有默认值，规则和数组一样
 * 4.内存的位置不一样
 *     局部变量：它是跟着方法走的  方法要想运行肯定在栈当中啊  所以我是位于栈内存
 *
 *     成员变量：位于堆内存  是我new对象的时候它里面有一个成员变量
 *  5.生命周期不一样
 *    局部变量  ：  随着方法进栈而诞生，随着方法出栈而消失（跟着方法走）要稍微短一些  转瞬即逝
 *    成员变量  ：  随着对象创建而诞生，随着对象被垃圾回收而消失（不跟着方法走 跟着对象走） 对象不是马上回收  它呢就会长一点  这是通常不是绝对
 */
public class VariableDifference {

    String name;//成员变量  有默认值  null

    public void methodA(){
        int num=20;//局部变量
        System.out.println(num);
        System.out.println(name);//可以访问  null
    }

    public void methodB(int  param){//方法的参数是与方法有一定的关系   而且在方法上  成员变量是直接在类中的    因此 方法的参数就是局部变量

        //有说过在param后面写= 什么什么 不能这么写
        //那参数是局部变量  我现在要输出一下

        System.out.println(param);//怎么不报错呢 为什么参数就可以直接使用呢   原因是   参数在方法调用的时候，必然会被赋值的

        //不赋值的局部变量不能用  要想使用必须赋值
        //如果声明一个 age 没有赋值; 暂时看起来没问题  但是当你使用这个局部变量的时候就会报错的 编译器不通过
        int  age;
        //System.out.println(age);  //代码报错  因为age没有默认值 并且没有为age赋值

        //System.out.println(num);//错误写法  这个方法当中没有num
        System.out.println(name);//可以访问  当然输出的是一个默认值

    }
}
